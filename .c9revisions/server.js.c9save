{"ts":1361715806658,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/bin/env node\n//  OpenShift sample Node application\nvar express = require('express');\nvar fs      = require('fs');\n\n\n/**\n *  Define the sample application.\n */\nvar SampleApp = function() {\n\n    //  Scope.\n    var self = this;\n\n\n    /*  ================================================================  */\n    /*  Helper functions.                                                 */\n    /*  ================================================================  */\n\n    /**\n     *  Set up server IP address and port # using env variables/defaults.\n     */\n    self.setupVariables = function() {\n        //  Set the environment variables we need.\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n\n        if (typeof self.ipaddress === \"undefined\") {\n            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this\n            //  allows us to run/test the app locally.\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n        };\n    };\n\n\n    /**\n     *  Populate the cache.\n     */\n    self.populateCache = function() {\n        if (typeof self.zcache === \"undefined\") {\n            self.zcache = { 'index.html': '' };\n        }\n\n        //  Local cache for static content.\n        self.zcache['index.html'] = fs.readFileSync('./index.html');\n    };\n\n\n    /**\n     *  Retrieve entry (content) from cache.\n     *  @param {string} key  Key identifying content to retrieve from cache.\n     */\n    self.cache_get = function(key) { return self.zcache[key]; };\n\n\n    /**\n     *  terminator === the termination handler\n     *  Terminate server on receipt of the specified signal.\n     *  @param {string} sig  Signal to terminate on.\n     */\n    self.terminator = function(sig){\n        if (typeof sig === \"string\") {\n           console.log('%s: Received %s - terminating sample app ...',\n                       Date(Date.now()), sig);\n           process.exit(1);\n        }\n        console.log('%s: Node server stopped.', Date(Date.now()) );\n    };\n\n\n    /**\n     *  Setup termination handlers (for exit and a list of signals).\n     */\n    self.setupTerminationHandlers = function(){\n        //  Process on exit and signals.\n        process.on('exit', function() { self.terminator(); });\n\n        // Removed 'SIGPIPE' from the list - bugz 852598.\n        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',\n         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'\n        ].forEach(function(element, index, array) {\n            process.on(element, function() { self.terminator(element); });\n        });\n    };\n\n\n    /*  ================================================================  */\n    /*  App server functions (main app logic here).                       */\n    /*  ================================================================  */\n\n    /**\n     *  Create the routing table entries + handlers for the application.\n     */\n    self.createRoutes = function() {\n        self.routes = { };\n\n        // Routes for /health, /asciimo and /\n        self.routes['/health'] = function(req, res) {\n            res.send('1');\n        };\n\n        self.routes['/asciimo'] = function(req, res) {\n            var link = \"http://i.imgur.com/kmbjB.png\";\n            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");\n        };\n\n        self.routes['/'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('index.html') );\n        };\n    };\n\n\n    /**\n     *  Initialize the server (express) and create the routes and register\n     *  the handlers.\n     */\n    self.initializeServer = function() {\n        self.createRoutes();\n        self.app = express.createServer();\n\n        //  Add handlers for the app (from the routes).\n        for (var r in self.routes) {\n            self.app.get(r, self.routes[r]);\n        }\n    };\n\n\n    /**\n     *  Initializes the sample application.\n     */\n    self.initialize = function() {\n        self.setupVariables();\n        self.populateCache();\n        self.setupTerminationHandlers();\n\n        // Create the express server and routes.\n        self.initializeServer();\n    };\n\n\n    /**\n     *  Start the server (starts up the sample application).\n     */\n    self.start = function() {\n        //  Start the app on the specific interface (and port).\n        self.app.listen(self.port, self.ipaddress, function() {\n            console.log('%s: Node server started on %s:%d ...',\n                        Date(Date.now() ), self.ipaddress, self.port);\n        });\n    };\n\n};   /*  Sample Application.  */\n\n\n\n/**\n *  main():  Main code.\n */\nvar zapp = new SampleApp();\nzapp.initialize();\nzapp.start();\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4776}]],"length":4776}
{"contributors":[],"silentsave":false,"ts":1361717122637,"patch":[[{"diffs":[[0,"ress"],[-1,".createServer"],[0,"();\n"]],"start1":3788,"start2":3788,"length1":21,"length2":8}]],"length":4763,"saved":false}
{"ts":1361717312769,"patch":[[{"diffs":[[0,"dex.html');\n"],[1,"        self.zcache['form.html'] = fs.readFileSync('./form.html');\n"],[0,"    };\n\n\n   "]],"start1":1383,"start2":1383,"length1":24,"length2":91},{"diffs":[[0,"l>\");\n        };"],[1,"\n        \n        self.routes['/form'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('form.html') );\n        };"],[0,"\n\n        self.r"]],"start1":3455,"start2":3455,"length1":32,"length2":212}]],"length":5010,"saved":false}
{"ts":1361717625456,"patch":[[{"diffs":[[0,"le Node "],[-1,"application"],[1,"server"],[0,"\nvar exp"]],"start1":34,"start2":34,"length1":27,"length2":22}]],"length":5005,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361843704632,"patch":[[{"diffs":[[0,"('fs');\n"],[1,"var mongoose = require('mongoose');\n"],[0,"\n\n/**\n *"]],"start1":104,"start2":104,"length1":16,"length2":52}]],"length":5041,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361880819633,"patch":[[{"diffs":[[0,"|| 8080;"],[1,"\n        \n        self.dbhost = process.env.OPENSHIFT_MONGODB_DB_HOST;\n        self.dbport = process.env.OPENSHIFT_MONGODB_DB_PORT;"],[0,"\n\n      "]],"start1":794,"start2":794,"length1":16,"length2":147},{"diffs":[[0,"       }\n    };\n"],[1,"    \n    self.initializeDb = function() {\n        mongoose.connect()\n    }\n"],[0,"\n\n    /**\n     *"]],"start1":4345,"start2":4345,"length1":32,"length2":107}]],"length":5247,"saved":false}
{"ts":1361882130417,"patch":[[{"diffs":[[0,"oose');\n"],[1,"var process.env.NODE_ENV || 'development'\nvar config = require('./config/config')[env]\n"],[0,"\n\n/**\n *"]],"start1":140,"start2":140,"length1":16,"length2":103}]],"length":5334,"saved":false}
{"ts":1361882147733,"patch":[[{"diffs":[[0,"e');\nvar"],[1," env ="],[0," process"]],"start1":143,"start2":143,"length1":16,"length2":22}]],"length":5340,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361898368202,"patch":[[{"diffs":[[0,"connect("],[-1,")"],[1,"config.db);"],[0,"\n    }\n\n"]],"start1":4513,"start2":4513,"length1":17,"length2":27}]],"length":5350,"saved":false}
{"ts":1361898396373,"patch":[[{"diffs":[[0,"zeServer();\n"],[1,"        self.initializeDb();\n"],[0,"    };\n\n\n   "]],"start1":4809,"start2":4809,"length1":24,"length2":53}]],"length":5379,"saved":false}
{"ts":1361898995698,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"mongoose"]],"start1":4496,"start2":4496,"length1":16,"length2":18},{"diffs":[[0,"ig.db);\n"],[1,"        mongoose.connect('mongdb://' + self.dbhost + ':' + self.dbport)\n"],[0,"    }\n\n\n"]],"start1":4527,"start2":4527,"length1":16,"length2":88}]],"length":5453,"saved":false}
{"ts":1361899144590,"patch":[[{"diffs":[[0,"ct('mong"],[1,"o"],[0,"db://' +"]],"start1":4557,"start2":4557,"length1":16,"length2":17}]],"length":5454,"saved":false}
{"ts":1361899344991,"patch":[[{"diffs":[[0,"f.dbport"],[-1,")"],[1," + '/commando');"],[0,"\n    }\n\n"]],"start1":4598,"start2":4598,"length1":17,"length2":32}]],"length":5469,"saved":false}
{"ts":1361899999934,"patch":[[{"diffs":[[0,"DB_PORT;"],[1,"\n        self.user = 'admin';\n        self.pass = 'I37XGJJEjGAr';"],[0,"\n\n      "]],"start1":1018,"start2":1018,"length1":16,"length2":81}]],"length":5534,"saved":false}
{"ts":1361900415990,"patch":[[{"diffs":[[0,"JEjGAr';"],[1,"\n        self.dbname = 'commando';\n        self.login = self.user + ':' + self.pass;"],[0,"\n\n      "]],"start1":1083,"start2":1083,"length1":16,"length2":100},{"diffs":[[0,"db://' +"],[1," self.login + '@' +"],[0," self.db"]],"start1":4715,"start2":4715,"length1":16,"length2":35},{"diffs":[[0,"ort + '/"],[-1,"commando'"],[1,"' + self.dbname"],[0,");\n    }"]],"start1":4771,"start2":4771,"length1":25,"length2":31}]],"length":5643,"saved":false}
{"ts":1361901756415,"patch":[[{"diffs":[[0,"f.dbname"],[1,",\n           function(err) {if (err) { console.log(\"mongohq connect error: \" + err); }  }"],[0,");\n    }"]],"start1":4786,"start2":4786,"length1":16,"length2":105}]],"length":5732,"saved":false}
{"ts":1361901777369,"patch":[[{"diffs":[[0,"ongo"],[-1,"hq"],[1,"ose"],[0," con"]],"start1":4847,"start2":4847,"length1":10,"length2":11}]],"length":5733,"saved":false}
{"ts":1361902187357,"patch":[[{"diffs":[[0,"ect("],[-1,"'mongodb://' + self.login + '@' + self.dbhost + ':' + self.dbport + '/' + self.dbname"],[1,"process.env.OPENSHIFT_MONGO_DB_URL"],[0,",\n  "]],"start1":4705,"start2":4705,"length1":93,"length2":42}]],"length":5682,"saved":false}
{"ts":1361904478639,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"        // Routes for /health, /asciimo and /\n"],[0,"    "]],"start1":3536,"start2":3536,"length1":54,"length2":8},{"diffs":[[0,"ect("],[-1,"process.env.OPENSHIFT_MONGO_DB_URL"],[1,"'mongodb://shane.maguire7@gmail.com:m4g5tool@linus.mongohq.com:10034/commando'"],[0,",\n  "]],"start1":4659,"start2":4659,"length1":42,"length2":86}]],"length":5680,"saved":false}
{"ts":1361907036733,"patch":[[{"diffs":[[0,"   self."],[-1,"initialize"],[1,"connect"],[0,"Db = fun"]],"start1":4563,"start2":4563,"length1":26,"length2":23},{"diffs":[[0,"   self."],[-1,"initialize"],[1,"connect"],[0,"Db();\n  "]],"start1":5124,"start2":5124,"length1":26,"length2":23}]],"length":5674,"saved":false}
