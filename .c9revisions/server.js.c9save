{"ts":1361715806658,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/bin/env node\n//  OpenShift sample Node application\nvar express = require('express');\nvar fs      = require('fs');\n\n\n/**\n *  Define the sample application.\n */\nvar SampleApp = function() {\n\n    //  Scope.\n    var self = this;\n\n\n    /*  ================================================================  */\n    /*  Helper functions.                                                 */\n    /*  ================================================================  */\n\n    /**\n     *  Set up server IP address and port # using env variables/defaults.\n     */\n    self.setupVariables = function() {\n        //  Set the environment variables we need.\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n\n        if (typeof self.ipaddress === \"undefined\") {\n            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this\n            //  allows us to run/test the app locally.\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n        };\n    };\n\n\n    /**\n     *  Populate the cache.\n     */\n    self.populateCache = function() {\n        if (typeof self.zcache === \"undefined\") {\n            self.zcache = { 'index.html': '' };\n        }\n\n        //  Local cache for static content.\n        self.zcache['index.html'] = fs.readFileSync('./index.html');\n    };\n\n\n    /**\n     *  Retrieve entry (content) from cache.\n     *  @param {string} key  Key identifying content to retrieve from cache.\n     */\n    self.cache_get = function(key) { return self.zcache[key]; };\n\n\n    /**\n     *  terminator === the termination handler\n     *  Terminate server on receipt of the specified signal.\n     *  @param {string} sig  Signal to terminate on.\n     */\n    self.terminator = function(sig){\n        if (typeof sig === \"string\") {\n           console.log('%s: Received %s - terminating sample app ...',\n                       Date(Date.now()), sig);\n           process.exit(1);\n        }\n        console.log('%s: Node server stopped.', Date(Date.now()) );\n    };\n\n\n    /**\n     *  Setup termination handlers (for exit and a list of signals).\n     */\n    self.setupTerminationHandlers = function(){\n        //  Process on exit and signals.\n        process.on('exit', function() { self.terminator(); });\n\n        // Removed 'SIGPIPE' from the list - bugz 852598.\n        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',\n         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'\n        ].forEach(function(element, index, array) {\n            process.on(element, function() { self.terminator(element); });\n        });\n    };\n\n\n    /*  ================================================================  */\n    /*  App server functions (main app logic here).                       */\n    /*  ================================================================  */\n\n    /**\n     *  Create the routing table entries + handlers for the application.\n     */\n    self.createRoutes = function() {\n        self.routes = { };\n\n        // Routes for /health, /asciimo and /\n        self.routes['/health'] = function(req, res) {\n            res.send('1');\n        };\n\n        self.routes['/asciimo'] = function(req, res) {\n            var link = \"http://i.imgur.com/kmbjB.png\";\n            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");\n        };\n\n        self.routes['/'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('index.html') );\n        };\n    };\n\n\n    /**\n     *  Initialize the server (express) and create the routes and register\n     *  the handlers.\n     */\n    self.initializeServer = function() {\n        self.createRoutes();\n        self.app = express.createServer();\n\n        //  Add handlers for the app (from the routes).\n        for (var r in self.routes) {\n            self.app.get(r, self.routes[r]);\n        }\n    };\n\n\n    /**\n     *  Initializes the sample application.\n     */\n    self.initialize = function() {\n        self.setupVariables();\n        self.populateCache();\n        self.setupTerminationHandlers();\n\n        // Create the express server and routes.\n        self.initializeServer();\n    };\n\n\n    /**\n     *  Start the server (starts up the sample application).\n     */\n    self.start = function() {\n        //  Start the app on the specific interface (and port).\n        self.app.listen(self.port, self.ipaddress, function() {\n            console.log('%s: Node server started on %s:%d ...',\n                        Date(Date.now() ), self.ipaddress, self.port);\n        });\n    };\n\n};   /*  Sample Application.  */\n\n\n\n/**\n *  main():  Main code.\n */\nvar zapp = new SampleApp();\nzapp.initialize();\nzapp.start();\n\n"]],"start1":0,"start2":0,"length1":0,"length2":4776}]],"length":4776}
{"contributors":[],"silentsave":false,"ts":1361717122637,"patch":[[{"diffs":[[0,"ress"],[-1,".createServer"],[0,"();\n"]],"start1":3788,"start2":3788,"length1":21,"length2":8}]],"length":4763,"saved":false}
{"ts":1361717312769,"patch":[[{"diffs":[[0,"dex.html');\n"],[1,"        self.zcache['form.html'] = fs.readFileSync('./form.html');\n"],[0,"    };\n\n\n   "]],"start1":1383,"start2":1383,"length1":24,"length2":91},{"diffs":[[0,"l>\");\n        };"],[1,"\n        \n        self.routes['/form'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('form.html') );\n        };"],[0,"\n\n        self.r"]],"start1":3455,"start2":3455,"length1":32,"length2":212}]],"length":5010,"saved":false}
{"ts":1361717625456,"patch":[[{"diffs":[[0,"le Node "],[-1,"application"],[1,"server"],[0,"\nvar exp"]],"start1":34,"start2":34,"length1":27,"length2":22}]],"length":5005,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361843704632,"patch":[[{"diffs":[[0,"('fs');\n"],[1,"var mongoose = require('mongoose');\n"],[0,"\n\n/**\n *"]],"start1":104,"start2":104,"length1":16,"length2":52}]],"length":5041,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361880819633,"patch":[[{"diffs":[[0,"|| 8080;"],[1,"\n        \n        self.dbhost = process.env.OPENSHIFT_MONGODB_DB_HOST;\n        self.dbport = process.env.OPENSHIFT_MONGODB_DB_PORT;"],[0,"\n\n      "]],"start1":794,"start2":794,"length1":16,"length2":147},{"diffs":[[0,"       }\n    };\n"],[1,"    \n    self.initializeDb = function() {\n        mongoose.connect()\n    }\n"],[0,"\n\n    /**\n     *"]],"start1":4345,"start2":4345,"length1":32,"length2":107}]],"length":5247,"saved":false}
{"ts":1361882130417,"patch":[[{"diffs":[[0,"oose');\n"],[1,"var process.env.NODE_ENV || 'development'\nvar config = require('./config/config')[env]\n"],[0,"\n\n/**\n *"]],"start1":140,"start2":140,"length1":16,"length2":103}]],"length":5334,"saved":false}
{"ts":1361882147733,"patch":[[{"diffs":[[0,"e');\nvar"],[1," env ="],[0," process"]],"start1":143,"start2":143,"length1":16,"length2":22}]],"length":5340,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361898368202,"patch":[[{"diffs":[[0,"connect("],[-1,")"],[1,"config.db);"],[0,"\n    }\n\n"]],"start1":4513,"start2":4513,"length1":17,"length2":27}]],"length":5350,"saved":false}
{"ts":1361898396373,"patch":[[{"diffs":[[0,"zeServer();\n"],[1,"        self.initializeDb();\n"],[0,"    };\n\n\n   "]],"start1":4809,"start2":4809,"length1":24,"length2":53}]],"length":5379,"saved":false}
{"ts":1361898995698,"patch":[[{"diffs":[[0,"        "],[1,"//"],[0,"mongoose"]],"start1":4496,"start2":4496,"length1":16,"length2":18},{"diffs":[[0,"ig.db);\n"],[1,"        mongoose.connect('mongdb://' + self.dbhost + ':' + self.dbport)\n"],[0,"    }\n\n\n"]],"start1":4527,"start2":4527,"length1":16,"length2":88}]],"length":5453,"saved":false}
{"ts":1361899144590,"patch":[[{"diffs":[[0,"ct('mong"],[1,"o"],[0,"db://' +"]],"start1":4557,"start2":4557,"length1":16,"length2":17}]],"length":5454,"saved":false}
{"ts":1361899344991,"patch":[[{"diffs":[[0,"f.dbport"],[-1,")"],[1," + '/commando');"],[0,"\n    }\n\n"]],"start1":4598,"start2":4598,"length1":17,"length2":32}]],"length":5469,"saved":false}
{"ts":1361899999934,"patch":[[{"diffs":[[0,"DB_PORT;"],[1,"\n        self.user = 'admin';\n        self.pass = 'I37XGJJEjGAr';"],[0,"\n\n      "]],"start1":1018,"start2":1018,"length1":16,"length2":81}]],"length":5534,"saved":false}
{"ts":1361900415990,"patch":[[{"diffs":[[0,"JEjGAr';"],[1,"\n        self.dbname = 'commando';\n        self.login = self.user + ':' + self.pass;"],[0,"\n\n      "]],"start1":1083,"start2":1083,"length1":16,"length2":100},{"diffs":[[0,"db://' +"],[1," self.login + '@' +"],[0," self.db"]],"start1":4715,"start2":4715,"length1":16,"length2":35},{"diffs":[[0,"ort + '/"],[-1,"commando'"],[1,"' + self.dbname"],[0,");\n    }"]],"start1":4771,"start2":4771,"length1":25,"length2":31}]],"length":5643,"saved":false}
{"ts":1361901756415,"patch":[[{"diffs":[[0,"f.dbname"],[1,",\n           function(err) {if (err) { console.log(\"mongohq connect error: \" + err); }  }"],[0,");\n    }"]],"start1":4786,"start2":4786,"length1":16,"length2":105}]],"length":5732,"saved":false}
{"ts":1361901777369,"patch":[[{"diffs":[[0,"ongo"],[-1,"hq"],[1,"ose"],[0," con"]],"start1":4847,"start2":4847,"length1":10,"length2":11}]],"length":5733,"saved":false}
{"ts":1361902187357,"patch":[[{"diffs":[[0,"ect("],[-1,"'mongodb://' + self.login + '@' + self.dbhost + ':' + self.dbport + '/' + self.dbname"],[1,"process.env.OPENSHIFT_MONGO_DB_URL"],[0,",\n  "]],"start1":4705,"start2":4705,"length1":93,"length2":42}]],"length":5682,"saved":false}
{"ts":1361904478639,"patch":[[{"diffs":[[0,"};\n\n"],[-1,"        // Routes for /health, /asciimo and /\n"],[0,"    "]],"start1":3536,"start2":3536,"length1":54,"length2":8},{"diffs":[[0,"ect("],[-1,"process.env.OPENSHIFT_MONGO_DB_URL"],[1,"'mongodb://shane.maguire7@gmail.com:m4g5tool@linus.mongohq.com:10034/commando'"],[0,",\n  "]],"start1":4659,"start2":4659,"length1":42,"length2":86}]],"length":5680,"saved":false}
{"ts":1361907036733,"patch":[[{"diffs":[[0,"   self."],[-1,"initialize"],[1,"connect"],[0,"Db = fun"]],"start1":4563,"start2":4563,"length1":26,"length2":23},{"diffs":[[0,"   self."],[-1,"initialize"],[1,"connect"],[0,"Db();\n  "]],"start1":5124,"start2":5124,"length1":26,"length2":23}]],"length":5674,"saved":false}
{"ts":1361907648303,"patch":[[{"diffs":[[0," */\nvar "],[-1,"Sample"],[0,"App = fu"]],"start1":282,"start2":282,"length1":22,"length2":16},{"diffs":[[0,"p = new "],[-1,"Sample"],[0,"App();\nz"]],"start1":5613,"start2":5613,"length1":22,"length2":16}]],"length":5662,"saved":false}
{"contributors":[],"silentsave":false,"ts":1361988077640,"patch":[[{"diffs":[[0,"ect("],[-1,"'mongodb://shane.maguire7@gmail.com:m4g5tool@linus.mongohq.com:10034/commando'"],[1,"config.db"],[0,",\n  "]],"start1":4650,"start2":4650,"length1":86,"length2":17}]],"length":5593,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362079561238,"patch":[[{"diffs":[[0,"connect("],[-1,"config.db"],[1,"'mongodb://maguis26:bgepjyqm@linus.mongohq.com:10034/commando'"],[0,",\n      "]],"start1":4646,"start2":4646,"length1":25,"length2":78}]],"length":5646,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363026564669,"patch":[[{"diffs":[[0,"mongoose');\n"],[1,"var passport = require('passport');\n"],[0,"var env = pr"]],"start1":136,"start2":136,"length1":24,"length2":60}]],"length":5682,"saved":false}
{"ts":1363032752110,"patch":[[{"diffs":[[0,"RT;\n"],[-1,"        self.user = 'admin';\n        self.pass = 'I37XGJJEjGAr';\n"],[0,"    "]],"start1":1053,"start2":1053,"length1":73,"length2":8},{"diffs":[[0,"      };\n    };\n"],[1,"    \n    self.configureExpress = function() {\n        \n    }\n"],[0,"\n\n    /**\n     *"]],"start1":1442,"start2":1442,"length1":32,"length2":93}]],"length":5678,"saved":false}
{"ts":1363032758100,"patch":[[{"diffs":[[0,"do';"],[-1,"\n        self.login = self.user + ':' + self.pass;"],[0,"\n\n  "]],"start1":1086,"start2":1086,"length1":58,"length2":8}]],"length":5628,"saved":false}
{"ts":1363034997087,"patch":[[{"diffs":[[0," };\n"],[-1,"    \n    self.configureExpress = function() {\n        \n    }\n\n"],[0,"\n   "]],"start1":1404,"start2":1404,"length1":70,"length2":8},{"diffs":[[0,"    };\n    \n"],[1,"    elf.configureExpress = function() {\n        app.use(express.logger('dev'));  /* 'default', 'short', 'tiny', 'dev' */\n        app.use(express.bodyParser()),\n        app.use(express.static(path.join(__dirname, 'public')));\n    }\n    \n"],[0,"    self.con"]],"start1":4464,"start2":4464,"length1":24,"length2":260}]],"length":5802,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363112782597,"patch":[[{"diffs":[[0,"   \n    "],[1,"s"],[0,"elf.conf"]],"start1":4472,"start2":4472,"length1":16,"length2":17},{"diffs":[[0,"ion() {\n        "],[1,"self."],[0,"app.use(express."]],"start1":4509,"start2":4509,"length1":32,"length2":37},{"diffs":[[0,"dev' */\n        "],[1,"self."],[0,"app.use(express."]],"start1":4595,"start2":4595,"length1":32,"length2":37},{"diffs":[[0,"        "],[1,"selfapp.use(express.cookieParser());\n        self.app.use(express.session({ secret: sessionVal }));\n        self."],[0,"app.use("]],"start1":4647,"start2":4647,"length1":16,"length2":129},{"diffs":[[0,".static("],[1,"self."],[0,"path.joi"]],"start1":4783,"start2":4783,"length1":16,"length2":21}]],"length":5931,"saved":false}
{"ts":1363114555966,"patch":[[{"diffs":[[0,"s = { };"],[1,"\n        \n        var pub_dir = './public/';"],[0,"\n\n      "]],"start1":3444,"start2":3444,"length1":16,"length2":60}]],"length":5975,"saved":false}
{"ts":1363116965468,"patch":[[{"diffs":[[0,"es.send("],[-1,"self.cache_get("],[1,"pub_dir + "],[0,"'index.h"]],"start1":4086,"start2":4086,"length1":31,"length2":26},{"diffs":[[0,"index.html')"],[-1," )"],[0,";\n        };"]],"start1":4105,"start2":4105,"length1":26,"length2":24}]],"length":5968,"saved":false}
{"ts":1363117002962,"patch":[[{"diffs":[[0,"ontent.\n        "],[1,"//"],[0,"self.zcache['ind"]],"start1":1636,"start2":1636,"length1":32,"length2":34}]],"length":5970,"saved":false}
{"ts":1363117402663,"patch":[[{"diffs":[[0,"   self."],[-1,"routes"],[1,"app.get"],[0,"['/'] = "]],"start1":3976,"start2":3976,"length1":22,"length2":23}]],"length":5971,"saved":false}
{"ts":1363117515811,"patch":[[{"diffs":[[0,"   self."],[-1,"app.get"],[1,"routes"],[0,"['/'] = "]],"start1":3976,"start2":3976,"length1":23,"length2":22}]],"length":5970,"saved":false}
{"ts":1363117814816,"patch":[[{"diffs":[[0,"    self"],[1,"."],[0,"app.use("]],"start1":4690,"start2":4690,"length1":16,"length2":17},{"diffs":[[0,"et: "],[-1,"sessionVal"],[1,"'cmsecret'"],[0," }))"]],"start1":4775,"start2":4775,"length1":18,"length2":18},{"diffs":[[0,"nHandlers();"],[1,"\n        self.configureExpress();"],[0,"\n\n        //"]],"start1":5326,"start2":5326,"length1":24,"length2":57}]],"length":6004,"saved":false}
{"ts":1363117929421,"patch":[[{"diffs":[[0,"s();"],[-1,"\n        self.configureExpress();"],[0,"\n\n  "]],"start1":5334,"start2":5334,"length1":41,"length2":8},{"diffs":[[0,"zeServer();\n"],[1,"        self.configureExpress();\n"],[0,"        self"]],"start1":5410,"start2":5410,"length1":24,"length2":57}]],"length":6004,"saved":false}
{"ts":1363118044822,"patch":[[{"diffs":[[0,"passport');\n"],[1,"var path = require('path'),\n"],[0,"var env = pr"]],"start1":172,"start2":172,"length1":24,"length2":52},{"diffs":[[0,".static("],[-1,"self."],[0,"path.joi"]],"start1":4851,"start2":4851,"length1":21,"length2":16}]],"length":6027,"saved":false}
{"ts":1363118051604,"patch":[[{"diffs":[[0,"('path')"],[-1,","],[1,";"],[0,"\nvar env"]],"start1":202,"start2":202,"length1":17,"length2":17}]],"length":6027,"saved":false}
{"ts":1363120126365,"patch":[[{"diffs":[[0,"res."],[-1,"send(pub_dir + '"],[1,"redirect('/"],[0,"inde"]],"start1":4115,"start2":4115,"length1":24,"length2":19}]],"length":6022,"saved":false}
{"ts":1363121716166,"patch":[[{"diffs":[[0,"  };"],[-1,"\n        \n        self.routes['/form'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.send(self.cache_get('form.html') );\n        };"],[0,"\n\n  "]],"start1":3813,"start2":3813,"length1":188,"length2":8}]],"length":5842,"saved":false}
{"ts":1363121724102,"patch":[[{"diffs":[[0,"{ };"],[-1,"\n        \n        var pub_dir = './public/';"],[0,"\n\n  "]],"start1":3478,"start2":3478,"length1":52,"length2":8}]],"length":5798,"saved":false}
{"ts":1363123441642,"patch":[[{"diffs":[[0,"public')));\n"],[1,"        \n        self.app.use(passport.initialize());\n        self.app.use(passport.session());\n"],[0,"    }\n    \n "]],"start1":4652,"start2":4652,"length1":24,"length2":120}]],"length":5894,"saved":false}
{"ts":1363124123457,"patch":[[{"diffs":[[0,"\n    }\n\n"],[-1,"\n"],[0,"    /**\n"]],"start1":5023,"start2":5023,"length1":17,"length2":16}]],"length":5893,"saved":false}
{"ts":1363124149499,"patch":[[{"diffs":[[0,"n.  */\n\n"],[-1,"\n\n"],[0,"/**\n *  "]],"start1":5795,"start2":5795,"length1":18,"length2":16}]],"length":5891,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364297963536,"patch":[[{"diffs":[[0,"')[env]\n"],[1,"var openshift = require(\"./config/openshift\")\n"],[0,"\n\n/**\n *"]],"start1":297,"start2":297,"length1":16,"length2":62},{"diffs":[[0," {\n\n"],[-1,"    //  Scope.\n    var self = this;\n\n\n    /*  ================================================================  */\n    /*  Helper functions.                                                 */\n    /*  ================================================================  */\n\n    /**\n     *  Set up server IP address and port # using env variables/defaults.\n     */\n    self.setupVariables = function() {\n        //  Set the environment variables we need.\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n        \n        self.dbhost = process.env.OPENSHIFT_MONGODB_DB_HOST;\n        self.dbport = process.env.OPENSHIFT_MONGODB_DB_PORT;\n        self.dbname = 'commando';\n\n        if (typeof self.ipaddress === \"undefined\") {\n            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this\n            //  allows us to run/test the app locally.\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n        };\n    };\n\n    /**\n     *  Populate the cache.\n     */\n    self.populateCache = function() {\n        if (typeof self.zcache === \"undefined\") {\n            self.zcache = { 'index.html': '' };\n        }\n\n        //  Local cache for static content.\n        //self.zcache['index.html'] = fs.readFileSync('./index.html');\n        self.zcache['form.html'] = fs.readFileSync('./form.html');\n    };\n\n\n    /**\n     *  Retrieve entry (content) from cache.\n     *  @param {string} key  Key identifying content to retrieve from cache.\n     */\n    self.cache_get = function(key) { return self.zcache[key]; };\n\n\n    /**\n     *  terminator === the termination handler\n     *  Terminate server on receipt of the specified signal.\n     *  @param {string} sig  Signal to terminate on.\n     */\n    self.terminator = function(sig){\n        if (typeof sig === \"string\") {\n           console.log('%s: Received %s - terminating sample app ...',\n                       Date(Date.now()), sig);\n           process.exit(1);\n        }\n        console.log('%s: Node server stopped.', Date(Date.now()) );\n    };\n\n\n    /**\n     *  Setup termination handlers (for exit and a list of signals).\n     */\n    self.setupTerminationHandlers = function(){\n        //  Process on exit and signals.\n        process.on('exit', function() { self.terminator(); });\n\n        // Removed 'SIGPIPE' from the list - bugz 852598.\n        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',\n         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'\n        ].forEach(function(element, index, array) {\n            process.on(element, function() { self.terminator(element); });\n        });\n    };\n\n\n    /*  ================================================================  */\n    /*  App server functions (main app logic here).                       */\n    /*  ================================================================  */\n\n    /**\n     *  Create the routing table entries + handlers for the application.\n     */\n    self.createRoutes = function() {\n        self.routes = { };\n\n        self.routes['/health'] = function(req, res) {\n            res.send('1');\n        };\n\n        self.routes['/asciimo'] = function(req, res) {\n            var link = \"http://i.imgur.com/kmbjB.png\";\n            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");\n        };\n\n        self.routes['/'] = function(req, res) {\n            res.setHeader('Content-Type', 'text/html');\n            res.redirect('/index.html');\n        };\n    };\n\n\n    /**\n     *  Initialize the server (express) and create the routes and register\n     *  the handlers.\n     */\n    self.initializeServer = function() {\n        self.createRoutes();"],[1,"\n"],[0,"\n   "]],"start1":416,"start2":416,"length1":3756,"length2":9}]],"length":2190,"saved":false}
{"ts":1364298629301,"patch":[[{"diffs":[[0,"//  "],[-1,"OpenShift sample Node server"],[1,"Main application entry point"],[0,"\nvar"]],"start1":16,"start2":16,"length1":36,"length2":36},{"diffs":[[0,"re('path');\n"],[1,"\n"],[0,"var env = pr"]],"start1":200,"start2":200,"length1":24,"length2":25},{"diffs":[[0,"lopment'"],[1,";"],[0,"\nvar con"]],"start1":252,"start2":252,"length1":16,"length2":17},{"diffs":[[0,"g')[env]"],[1,";"],[0,"\nvar ope"]],"start1":298,"start2":298,"length1":16,"length2":17},{"diffs":[[0,"ft\")"],[1,";"],[0,"\n\n"],[-1,"\n/**\n *  Define the sample application.\n */\nvar App = function() {"],[1,"// openshift preliminary functions\nopenshift();\n\n// db connection\nmongoose.connect(config.db);\n\n"],[0,"\n\n\n\n"]],"start1":349,"start2":349,"length1":76,"length2":107}]],"length":2224,"saved":false}
{"ts":1364298767840,"patch":[[{"diffs":[[0,");\n\n"],[-1,"\n\n\n\n        self.app = express();\n\n        //  Add handlers for the app (from the routes).\n        for (var r in self.routes) {\n            self.app.get(r, self.routes[r]);\n        }\n    };\n    \n    self.configureExpress = function() {\n        self.app.use(express.logger('dev'));  /* 'default', 'short', 'tiny', 'dev' */\n        self.app.use(express.bodyParser()),\n        self.app.use(express.cookieParser());\n        self.app.use(express.session({ secret: 'cmsecret' }));\n        self.app.use(express.static(path.join(__dirname, 'public')));\n        \n        self.app.use(passport.initialize());\n        self.app.use(passport.session());\n    }\n    \n    self.connectDb = function() {\n        //mongoose.connect(config.db);\n        mongoose.connect('mongodb://maguis26:bgepjyqm@linus.mongohq.com:10034/commando',\n           function(err) {if (err) { console.log(\"mongoose connect error: \" + err); }  });\n    }\n\n    /**\n     *  Initializes the sample application.\n     */\n    self.initialize = function() {\n        self.setupVariables();\n        self.populateCache();\n        self.setupTerminationHandlers();\n\n        // Create the express server and routes.\n        self.initializeServer();\n        self.configureExpress();\n        self.connectDb();\n    };"],[1,"var models_path = __dirname + '/app/models';\nfs.readdirSync(models_path).forEach(function (file) {\n  require(models_path+'/'+file);\n});\n\n// bootstrap passport config\nrequire('./config/passport')(passport, config);\n\nvar app = express();\n\n// express settings\nrequire('./config/express')(app, config, passport);\n\n// Bootstrap routes\n//require('./config/routes')(app, passport, auth)\n\n\n"],[0,"\n\n\n "]],"start1":448,"start2":448,"length1":1265,"length2":390}]],"length":1349,"saved":false}
{"contributors":[],"silentsave":false,"ts":1364308911525,"patch":[[{"diffs":[[0,"\n\n\n\n"],[-1,"\n\n    /**\n     *  Start the server (starts up the sample application).\n     */\n    self.start = function() {\n        //  Start the app on the specific interface (and port).\n        self.app.listen(self.port, self.ipaddress, function() {\n            console.log('%s: Node server started on %s:%d ...',\n                        Date(Date.now() ), self.ipaddress, self.port);\n        });\n    };\n\n};   /*  Sample Application.  */\n\n/**\n *  main():  Main code.\n */\nvar zapp = new App();\nzapp.initialize();\nzapp.start();\n\n"]],"start1":831,"start2":831,"length1":518,"length2":4}]],"length":835,"saved":false}
{"ts":1364308961333,"patch":[[{"diffs":[[0," auth)\n\n"],[1,"var setupVariables = function() {\n        //  Set the environment variables we need.\n        self.ipaddress = process.env.OPENSHIFT_INTERNAL_IP;\n        self.port      = process.env.OPENSHIFT_INTERNAL_PORT || 8080;\n\n        if (typeof self.ipaddress === \"undefined\") {\n            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this\n            //  allows us to run/test the app locally.\n            console.warn('No OPENSHIFT_INTERNAL_IP var, using 127.0.0.1');\n            self.ipaddress = \"127.0.0.1\";\n        }\n    };"],[0,"\n\n"]],"start1":825,"start2":825,"length1":10,"length2":540}]],"length":1365,"saved":false}
{"ts":1364308971341,"patch":[[{"diffs":[[0,"e need.\n        "],[-1,"self."],[1,"var "],[0,"ipaddress = proc"]],"start1":910,"start2":910,"length1":37,"length2":36}]],"length":1364,"saved":false}
{"ts":1364308975340,"patch":[[{"diffs":[[0,"        "],[-1,"self."],[1,"var "],[0,"port    "]],"start1":977,"start2":977,"length1":21,"length2":20}]],"length":1363,"saved":false}
{"ts":1364308980857,"patch":[[{"diffs":[[0,"(typeof "],[-1,"self."],[0,"ipaddres"]],"start1":1058,"start2":1058,"length1":21,"length2":16}]],"length":1358,"saved":false}
{"ts":1364308983622,"patch":[[{"diffs":[[0,"    "],[-1,"self."],[0,"ipad"]],"start1":1306,"start2":1306,"length1":13,"length2":8}]],"length":1353,"saved":false}
{"ts":1364308996269,"patch":[[{"diffs":[[0,"h)\n\n"],[-1,"var setupVariables = function() {\n        //  Set the environment variables we need."],[0,"\n   "]],"start1":829,"start2":829,"length1":92,"length2":8}]],"length":1269,"saved":false}
{"ts":1364308998896,"patch":[[{"diffs":[[0,"auth)\n\n\n"],[-1,"        "],[0,"var ipad"]],"start1":826,"start2":826,"length1":24,"length2":16}]],"length":1261,"saved":false}
{"ts":1364309000619,"patch":[[{"diffs":[[0," auth)\n\n"],[-1,"\n"],[0,"var ipad"]],"start1":825,"start2":825,"length1":17,"length2":16}]],"length":1260,"saved":false}
{"ts":1364309003047,"patch":[[{"diffs":[[0,"NAL_IP;\n"],[-1,"        "],[0,"var port"]],"start1":876,"start2":876,"length1":24,"length2":16}]],"length":1252,"saved":false}
{"ts":1364309010748,"patch":[[{"diffs":[[0," 8080;\n\n"],[-1,"        "],[0,"if (type"]],"start1":938,"start2":938,"length1":24,"length2":16}]],"length":1244,"saved":false}
{"ts":1364309013039,"patch":[[{"diffs":[[0,"ned\") {\n"],[-1,"        "],[0,"    //  "]],"start1":978,"start2":978,"length1":24,"length2":16}]],"length":1236,"saved":false}
{"ts":1364309016251,"patch":[[{"diffs":[[0," - this\n"],[-1,"        "],[0,"    //  "]],"start1":1043,"start2":1043,"length1":24,"length2":16}]],"length":1228,"saved":false}
{"ts":1364309018820,"patch":[[{"diffs":[[0,"ocally.\n"],[-1,"        "],[0,"    cons"]],"start1":1090,"start2":1090,"length1":24,"length2":16}]],"length":1220,"saved":false}
{"ts":1364309020589,"patch":[[{"diffs":[[0,".0.1');\n"],[-1,"        "],[0,"    ipad"]],"start1":1157,"start2":1157,"length1":24,"length2":16}]],"length":1212,"saved":false}
{"ts":1364310100875,"patch":[[{"diffs":[[0,"    "],[-1,"};"],[0,"\n\n"]],"start1":1204,"start2":1204,"length1":8,"length2":6}]],"length":1210,"saved":false}
{"ts":1364310108459,"patch":[[{"diffs":[[0,"1\";\n"],[-1,"        "],[0,"}\n  "]],"start1":1190,"start2":1190,"length1":16,"length2":8}]],"length":1202,"saved":false}
{"ts":1364310804134,"patch":[[{"diffs":[[0,"0.1\";\n}\n"],[1,"\n\n"],[0,"    \n\n"]],"start1":1188,"start2":1188,"length1":14,"length2":16}]],"length":1204,"saved":false}
{"ts":1364310804880,"patch":[[{"diffs":[[0,".1\";\n}\n\n"],[1,"app.listen(port)\nconsole.log('Express app started on port '+port)"],[0,"\n    \n\n"]],"start1":1189,"start2":1189,"length1":15,"length2":80}]],"length":1269,"saved":false}
{"ts":1364311115521,"patch":[[{"diffs":[[0,"en(port)"],[1,";"],[0,"\nconsole"]],"start1":1205,"start2":1205,"length1":16,"length2":17}]],"length":1270,"saved":false}
{"ts":1364311117117,"patch":[[{"diffs":[[0," '+port)"],[1,";"],[0,"\n    \n\n"]],"start1":1255,"start2":1255,"length1":15,"length2":16}]],"length":1271,"saved":false}
{"ts":1364312254541,"patch":[[{"diffs":[[0,"+ '/"],[-1,"app/"],[0,"mode"]],"start1":480,"start2":480,"length1":12,"length2":8}]],"length":1267,"saved":false}
{"contributors":[],"silentsave":true,"ts":1364416793289,"patch":[[{"diffs":[[0,"port"],[-1,", auth"],[0,")\n\nv"]],"start1":816,"start2":816,"length1":14,"length2":8}]],"length":1261,"saved":false}
{"ts":1364416796083,"patch":[[{"diffs":[[0,"assport)"],[1,";"],[0,"\n\nvar ip"]],"start1":813,"start2":813,"length1":16,"length2":17}]],"length":1262,"saved":false}
{"ts":1364416799746,"patch":[[{"diffs":[[0," routes\n"],[-1,"//"],[0,"require("]],"start1":770,"start2":770,"length1":18,"length2":16}]],"length":1260,"saved":false}
{"ts":1364417195667,"patch":[[{"diffs":[[0,", config);\n\n"],[1,"// Ex\n"],[0,"var app = ex"]],"start1":651,"start2":651,"length1":24,"length2":30}]],"length":1266,"saved":false}
{"ts":1364417199593,"patch":[[{"diffs":[[0,";\n\n// Ex"],[1,"press application"],[0,"\nvar app"]],"start1":660,"start2":660,"length1":16,"length2":33}]],"length":1283,"saved":false}
{"ts":1364417210778,"patch":[[{"diffs":[[0,".1\";\n}\n\n"],[1,"// Start server\n"],[0,"app.list"]],"start1":1201,"start2":1201,"length1":16,"length2":32}]],"length":1299,"saved":false}
{"ts":1364417216607,"patch":[[{"diffs":[[0,"Express "],[-1,"application"],[1,"server"],[0,"\nvar app"]],"start1":666,"start2":666,"length1":27,"length2":22}]],"length":1294,"saved":false}
{"ts":1364417239045,"patch":[[{"diffs":[[0," 8080;\n\n"],[1,"// Took this from Openshift sample app\n"],[0,"if (type"]],"start1":945,"start2":945,"length1":16,"length2":55}]],"length":1333,"saved":false}
{"ts":1364417244028,"patch":[[{"diffs":[[0,"mple app"],[1,", seems like a handy function"],[0,"\nif (typ"]],"start1":983,"start2":983,"length1":16,"length2":45}]],"length":1362,"saved":false}
